enum TransactionType {
  ProfileCreated
  ProfileUpdated

  TokenApproved
  TokenSent
  TokenReceived

  QuestStarted
  QuestCanceled
  QuestCompleted

  NFTTokenApproved
  HeroGen0Purchase
  HeroCrystalOpen
  HeroCrystalSummoned

  HeroSaleCancelled
  HeroSaleCreated
  HeroSaleBuySuccessful
  HeroSaleSellSuccessful
  
  HeroRentalCancelled
  HeroRentalCreated
  HeroRentSuccessful
  HeroRentOutSuccessful

  HeroSent
  HeroReceived

  HeroMeditationBegun
  HeroMeditationCompleted
  
  BankDeposited
  BankWithdrawn
  
  GardenDeposited
  GardenWithdrawn
  GardenHarvested

  LiquidityAdded
  LiquidityRemoved
  TokenSwapped

  ItemBought
  ItemSold
}

enum QuestStatus {
  Undefined
  Started
  Completed
  Cancelled
}

enum AuctionStatus {
  Selling
  Sold
  Renting
  Rent
  Cancelled
}

enum MeditationStatus {
  Begun
  Completed
}

enum HeroStat {
  Undefined
  Strength
  Agility
  Intelligence
  Wisdom
  Luck
  Vitality
  Endurance
  Dexterity
}

enum AuctionType {
  HeroSale
  HeroRental
}

type Profile @entity {
  id: ID!
  player: Account!,
  name: String!,
  createdAt: BigInt!,
  picId: Int!
  heroId: BigInt
}

type Account @entity {
  id: ID!
  profile: Profile @derivedFrom(field: "player")
  transactions: [Transaction!] @derivedFrom(field: "player")
}

type Token @entity {
  id: ID!
  name: String!
  symbol: String!
  decimal: Int!
}

type Hero @entity {
  id: ID!
  price: BigInt
}

type Quest @entity {
  id: ID!
  address: String!
  heroes: [Hero!]!
  player: Account!
  startTime: Int
  startBlock: Int
  completeAtTime: Int
  attempts: Int
  status: QuestStatus!
  questRewards: [QuestReward!] @derivedFrom(field: "quest")
}

type QuestReward @entity {
  id: ID!
  player: Account!
  quest: Quest!
  hero: Hero!
  item: Token!
  itemQuantity: Int!
}

type HeroAuction @entity {
  id: ID!
  hero: Hero!
  status: String
  owner: Account!
  type: AuctionType!
  startingPrice: BigInt
  endingPrice: BigInt
  duration: Int
  totalPrice: BigInt
  winner: Account
}

type Crystal @entity {
  id: ID!
  player: Account
  hero: Hero
  summoner: Hero
  assistant: Hero
  generation: Int
  createdBlock: Int
  summonerTears: Int
  assistantTears: Int
  bonusItem: String
}

type HeroSale @entity {
  id: ID!
  player: Account!
  crystal: Crystal!
  createdBlock: Int!
  purchasePrice: BigInt!
}

type Meditation @entity {
  id: ID!
  player: Account!
  hero: Hero!
  status: String
  primaryStat: HeroStat
  secondaryStat: HeroStat
  tertiaryStat: HeroStat
  attunementCrystal: String
}

type TokenTransfer @entity {
  id: ID!
  token: Token!
  from: Account!
  to: Account!
  value: BigInt!
}

type HeroTransfer @entity {
  id: ID!
  from: Account!
  to: Account!
  hero: Hero!
}

enum ItemTradingType {
  Sell
  Buy
}

type ItemTrading @entity {
  id: ID!
  player: Account!
  type: ItemTradingType!
  token: Token!
  quantity: Int!
  gold: BigInt!
}

type Pair @entity {
  id: ID!
  token0: Token
  token1: Token
  reserve0: BigInt
  reserve1: BigInt
}

enum GardenType @entity {
  Deposit
  Withdraw
  Harvest
}

type GardenInfo @entity {
  id: ID!
  player: Account!
  poolId: BigInt!
  amount: BigInt!
  type: GardenType!
  lockAmount: BigInt
}

enum PairChangeType {
  Mint
  Burn
  Swap
}
type PairChange @entity {
  id: ID!
  pair: Pair!
  sender: Account!
  type: PairChangeType!
  amount0: BigInt
  amount1: BigInt
  amount0In: BigInt
  amount1In: BigInt
  amount0Out: BigInt
  amount1Out: BigInt
  to: Account
}

type TokenApproval @entity {
  id: ID!
  token: Token!
  owner: Account!
  spender: String!
  amount: BigInt
}

type HeroApproval @entity {
  id: ID!
  token: String!
  owner: Account!
  spender: Account!
  tokenId: BigInt
  approvedAll: Boolean
}

type Transaction @entity {
  id: ID!
  block: Int!
  hash: String!
  player: Account!
  type: TransactionType!
  value: BigInt!
  contractAddress: Bytes!
  gasPrice: BigInt!
  gasUsed: BigInt
  quest: Quest
  auction: HeroAuction
  meditation: Meditation
  crystal: Crystal
  heroSale: HeroSale
  tokenTransfer: TokenTransfer
  heroTransfer: HeroTransfer
  itemsTrading: ItemTrading
  gardenInfo: GardenInfo
  pairChange: PairChange
  profile: Profile
  tokenApproval: TokenApproval
  heroApproval: HeroApproval
  timestamp: Int!
}
