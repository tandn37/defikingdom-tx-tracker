enum TransactionType {
  TokenSent
  TokenReceived

  QuestStarted
  QuestCanceled
  QuestCompleted

  HeroGen0Purchase
  HeroCrystalOpen
  HeroCrystalSummoned

  HeroSaleCancelled
  HeroSaleCreated
  HeroSaleBuySuccessful
  HeroSaleSellSuccessful
  
  HeroRentalCancelled
  HeroRentalCreated
  HeroRentSuccessful
  HeroRentOutSuccessful

  HeroSent
  HeroReceived

  HeroMeditationBegun
  HeroMeditationCompleted
  
  BankDeposited
  BankWithdrawn
  
  GardenDeposit
  GardenWithdraw
  GardenHarvest
  SeedAdd
  SeedRemove
  
  Swap

  ItemBought
  ItemSold
}

enum QuestType {
  Undefined
  Forager
  Miner
  Fisher
  Gardener
  WishingWell
}

enum QuestStatus {
  Undefined
  Started
  Completed
  Cancelled
}

enum AuctionStatus {
  Selling
  Sold
  Renting
  Rent
  Cancelled
}

enum MeditationStatus {
  Begun
  Completed
}

enum ItemName {
  Undefined
  GaiaTears
  Ambertaffy
  Darkweed
  Goldvein
  Ragweed
  Redleaf
  Rockroot
  SwiftThistle
  Bloater
  Ironscale
  Lanterneye
  Redgill
  Sailfish
  Shimmerskin
  Silverfin
  ShvasRune
  BluePetEgg
  GreyPetEgg
  GoldenEgg
}

enum HeroStat {
  Undefined
  Strength
  Agility
  Intelligence
  Wisdom
  Luck
  Vitality
  Endurance
  Dexterity
}

enum AuctionType {
  HeroSale
  HeroRental
}

type Account @entity {
  id: ID!
}

type Token @entity {
  id: ID!
  symbol: String!
  decimal: Int!
}

type Hero @entity {
  id: ID!
  price: BigInt
}

type Item @entity {
  id: ID!
  name: String!
}

type Quest @entity {
  id: ID!
  type: QuestType!
  address: String!
  heroes: [Hero!]!
  player: Account!
  startTime: Int
  startBlock: Int
  completeAtTime: Int
  attempts: Int
  status: QuestStatus!
  questRewards: [QuestReward!] @derivedFrom(field: "quest")
}

type QuestReward @entity {
  id: ID!
  player: Account!
  quest: Quest!
  hero: Hero!
  item: Item!
  itemQuantity: Int!
}

type HeroAuction @entity {
  id: ID!
  hero: Hero!
  status: String
  owner: Account!
  type: AuctionType!
  startingPrice: BigInt
  endingPrice: BigInt
  duration: Int
  totalPrice: BigInt
  winner: Account
}

type Crystal @entity {
  id: ID!
  player: Account
  hero: Hero
  summoner: Hero
  assistant: Hero
  generation: Int
  createdBlock: Int
  summonerTears: Int
  assistantTears: Int
  bonusItem: String
}

type HeroSale @entity {
  id: ID!
  player: Account!
  crystal: Crystal!
  createdBlock: Int!
  purchasePrice: BigInt!
}

type Meditation @entity {
  id: ID!
  player: Account!
  hero: Hero!
  status: String
  primaryStat: HeroStat
  secondaryStat: HeroStat
  tertiaryStat: HeroStat
  attunementCrystal: String
}

type TokenTransfer @entity {
  id: ID!
  token: Token!
  from: Account!
  to: Account!
  value: BigInt!
}

type HeroTransfer @entity {
  id: ID!
  from: Account!
  to: Account!
  hero: Hero!
}

type ItemTransfer @entity {
  id: ID!
  from: Account!
  to: Account!
  item: Item!
  tokenId: BigInt!
}

type Transaction @entity {
  id: ID!
  block: Int!
  hash: String!
  player: Account!
  type: TransactionType!
  value: BigInt!
  contractAddress: Bytes!
  gasPrice: BigInt!
  gasUsed: BigInt
  quest: Quest
  auction: HeroAuction
  meditation: Meditation
  crystal: Crystal
  heroSale: HeroSale
  tokenTransfer: TokenTransfer
  heroTransfer: HeroTransfer
  itemsTransfer: [ItemTransfer!]
  timestamp: Int!
}
